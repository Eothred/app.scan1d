<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="all" name="xal.core">
	<import file="../config/config.xml"/>
    
	<description>Builds Open XAL Core</description>
	
    <target name="init">
        <property name="srcroot" value="." />
        <mkdir dir="${build.root}" />
    </target>
    
    
    <!-- Build the core and run the tests. -->
    <target name="run-tests" depends="all">
        <subant target="run-tests">
            <fileset dir="test">
                <include name="build.xml" />
            </fileset>
        </subant>
    </target>
	
	
	<!-- Macro to compile the core XAL classes using the specified compiler flag -->
	<macrodef name="compile-flagged">
		<attribute name="flag" default="-Xlint:none" />
		<sequential>
			<mkdir dir="${build.compile.core.root}" />
			<javac debug="true" source="${build.compile.java.source}" target="${build.compile.java.target}" includeAntRuntime="no" deprecation="true" destdir="${build.compile.core.root}" srcdir="${srcroot}/${source.code.dir}" includes="**" sourcepath="">
				<classpath>
					<pathelement location="${build.intermediates.core}/lib.jar" />
				</classpath>
				<compilerarg value="@{flag}" />
			</javac>
		</sequential>
	</macrodef>
	
	
	<!-- Compile the core XAL classes using the lint flag to report all recommended warnings -->
    <target name="compile" depends="init, jar-lib" >
		<compile-flagged flag="-Xlint" />
    </target>
		
	
	<!-- Compile the core XAL classes using the lint flag to report all recommended warnings -->
    <target name="compile-warn-all" depends="init, jar-lib" >
		<compile-flagged flag="-Xlint" />
    </target>
	
	
	<!-- Compile the core XAL classes reporting on the mandatory warnings -->
    <target name="compile-warn-mandatory" depends="init, jar-lib" >
		<compile-flagged />
    </target>
    
	
	<!-- Jar the core resources -->
    <target  name="jar-resources" depends="init">
        <mkdir dir="${build.intermediates.core}" />
        <jar compress="true" jarfile="${build.intermediates.core}/resources.jar" index="true">
			<fileset dir="resources" />
       </jar>
    </target>


	<!-- Jar the core by jaring the core's compiled classes -->
    <target  name="jar-core-classes" depends="init, compile">
        <jar compress="true" jarfile="${build.intermediates.core}/core-classes.jar" index="true">
			<fileset dir="${build.compile.core.root}" includes="xal/**/*" />
		</jar>
    </target>


	<!-- Join the third party jars into a common external jar file -->
    <target name="jar-lib" depends="init">
        <mkdir dir="${build.jar.lib.root}" />
        <jar compress="true" jarfile="${build.intermediates.core}/lib.jar" index="true" duplicate="preserve">
			<zipgroupfileset dir="lib">
				<patternset>
					<include name="*.jar" />
				</patternset>
			</zipgroupfileset>
        </jar>
    </target>


	<!-- Merge the core compiled classes, core resources.jar and core lib.jar -->
    <target  name="jar-core" depends="init, jar-core-classes, jar-resources">
        <mkdir dir="${build.intermediates.shared}" />
        <jar compress="true" jarfile="${build.intermediates.shared}/xal-core.jar" index="true">
			<zipgroupfileset dir="${build.intermediates.core}">
				<patternset>
					<include name="*.jar" />
				</patternset>
			</zipgroupfileset>
		</jar>
    </target>

	
	<!-- merge the external jars and build XAL core -->
    <target name="all" depends="jar-lib,jar-core" description="Build everything." >
        <echo message="Everything built. " />
    </target>

	
	<!-- Javadoc the XAL core -->
    <target name="doc" depends="init, jar-core" description="Javadoc XAL core." >
        <mkdir dir="${build.javadoc.root}" />
        <javadoc destdir="${build.javadoc.root}" packagenames="xal.*" author="false" version="false" maxmemory="512m">
            <sourcepath>
                <pathelement location="${srcroot}/${source.code.dir}" />
            </sourcepath>
            <classpath>
                <pathelement location="${build.intermediates.shared}/xal-core.jar" />
            </classpath>
        </javadoc>
    </target>
	
	
	<!-- clean compiled products -->
    <target name="clean" depends="init" description="Clean all build products." >
        <delete dir="${build.compile.core.root}" quiet="true" />
        <delete dir="${build.intermediates.core}" quiet="true" />
        <delete file="${build.intermediates.shared}/xal-core.jar" quiet="true" />

        <subant target="clean">
            <fileset dir=".">
                <include name="test/build.xml" />
            </fileset>
        </subant>
        
        <echo message="Core cleaned!" />
    </target>
    
	
	<!-- provide guidance on the various targets -->
    <target name="help">
		<echo message="Build the XAL core" />
		<echo message="Usage: ant [ant options] target1 [target2 | target3 | ... ]" />
		<echo message="" />
		<echo message="  where target(s) can be:" />
		<echo message="    help ....................... Print this message." />
		<echo message="    all ........................ Compile the core XAL classes and assemble the jar products." />
		<echo message="    clean ...................... Clean compiled classes and intermediate build products" />
		<echo message="    compile .................... Compile the core XAL classes reporting all recommended warnings." />
		<echo message="    compile-warn-all ........... Compile the core XAL classes reporting all recommended warnings." />
		<echo message="    compile-warn-mandatory ..... Compile the core XAL classes reporting only mandated warnings." />
		<echo message="    doc ........................ Generate documentation for the core." />
		<echo message="    jar-core ................... Assemble the core XAL classes and resources and libraries into the intermediate shared xal-core.jar" />
		<echo message="    jar-lib .................... Assemble the external jar files into a single library, xal-lib.jar" />
		<echo message="    jar-resources .............. Assemble the core resources into an intermediate core jar file, resources.jar" />
		<echo message="    run-tests .................. Build and run the test cases." />
    </target>
</project>

